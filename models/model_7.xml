<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.


const int munkaszam = 2;//25;
const int gepszam = 1;
typedef int[0, munkaszam-1] munka_id;
typedef int[0, gepszam-1] gep_id;


const int munkaido2[munkaszam] = {2, 3/*, 1607, 100000, 100000, 5263, 4865, 100000, 100000, 100000, 100000, 100000, 11250, 2632, 5000, 1250, 4474, 100000, 100000, 2424, 7317, 100000, 100000, 100000, 5952*/};


int minTime(munka_id mid){
  int toReturn=9999;
  for(gid: gep_id) {
    if(munkaido2[mid]&lt;toReturn) toReturn = munkaido2[mid];
  }
return toReturn;
}


const int hossz[2] = {2,3};	//feladatok hossza
const int hatarido_ossz[2] = {6,8};		//feladatok végső határideje
const int pr[2] = {4,3};	//költségek
const int from[2]={0,3}; // hanyadik indextol a lenti szetszedett valtozatban
const int to[2]= {2,4};

const int hatarido[5]   = { 14, 15, 15, 16, 17 }; //darabolás utáni határidők
const int koltseg[5] = { 2, 2, 1, 1, 1 }; //daraok költségei
int tulvagyunkrajta[5]={0,0,0,0,0};

void settulvagyunk(int jobid){
  int i;
  for(i=from[jobid]; i&lt;=to[jobid]; i++)
    tulvagyunkrajta[i]=1;
}

int remaining() {
  int maxhatarido=0;

  // 0: nem kell meg utemezni
  // 1: utemezni kell
  // 2: mar utemezve van
  int allapot[5] = {0,0,0,0,0};

  // utemezes[i]== az i. task mikorra van beutemezve
  int utemezes[5];
  int mki=0;
  int i=0;
  int t=0;
  int osszkoltseg=0;

  // megkeressuk a max deadline-t
  for(i=0;i&lt;5;i++)
    if(maxhatarido&lt;hatarido[i])
      maxhatarido=hatarido[i];

  
 
  for(t=maxhatarido;t&gt;=0;t--) {
    
    for(i=0;i&lt;5;i++)
      if(tulvagyunkrajta[i]==0 &amp;&amp; allapot[i]==0 &amp;&amp; hatarido[i]==t)
        allapot[i]=1;

    mki=-1;
    for(i=0;i&lt;5;i++)
      if(allapot[i]==1 &amp;&amp; (mki==-1 || koltseg[i]&gt;koltseg[mki]))	
        mki=i;

    // Ha van utemezendo
    if(mki!=-1){
      allapot[mki]=2;
      utemezes[mki]=t;
    }
  }
  
  for(i=0;i&lt;5;i++)
    osszkoltseg += (hatarido[i]-utemezes[i])*koltseg[i];

return osszkoltseg;

}


int[-1,munkaszam-1] elozo=-1;
int[-1,munkaszam-1] aktualis=-1;

const int hatarido_m[2] = {15, 17/*, 22000, 25000, 20000, 30000, 21000, 26000, 30000, 29000, 30000, 21000, 30000, 25000, 24000, 30000, 30000, 30000, 13000, 19000, 30000, 20000, 12000, 30000, 17000*/};

const int beallasido = 5;

chan foglal;
chan kezdodik;
chan elenged;

clock time;

int[0,munkaszam] todo = munkaszam;</declaration><template><name x="5" y="5">Gep</name><declaration>// Place local declarations here.
clock t;
int remain;</declaration><location id="id0" x="-40" y="-176"><committed/></location><location id="id1" x="168" y="-64"><name x="184" y="-80">Dolgozik</name><label kind="invariant" x="184" y="-64">t&lt;=munkaido2[aktualis]</label></location><location id="id2" x="-128" y="-64"><name x="-208" y="-96">Bekapcsolt</name></location><init ref="id2"/><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-32" y="-142">elozo==-1</label><label kind="synchronisation" x="-32" y="-120">kezdodik!</label><nail x="-40" y="-64"/></transition><transition><source ref="id2"/><target ref="id0"/><label kind="guard" x="-240" y="-120">time &gt;= beallasido</label><label kind="synchronisation" x="-200" y="-168">foglal?</label><label kind="assignment" x="-168" y="-152">t=0</label><nail x="-128" y="-176"/><nail x="-72" y="-176"/><nail x="-56" y="-176"/></transition><transition><source ref="id1"/><target ref="id2"/><label kind="synchronisation" x="-72" y="-8">elenged?</label><label kind="assignment" x="-104" y="8">elozo=aktualis</label><nail x="168" y="-8"/><nail x="-128" y="-8"/></transition></template><template><name>Feladatok</name><parameter>const munka_id id</parameter><declaration>
clock ora;
</declaration><location id="id3" x="-96" y="-8"><name x="-304" y="-24">Gep_befoglalva_atallasra_var</name><label kind="invariant" x="-64" y="-16">time &lt;= hatarido_m[id] - minTime(id)</label></location><location id="id4" x="-96" y="280"><name x="-192" y="272">Leszallitva</name></location><location id="id5" x="-96" y="192"><name x="-152" y="184">Kesz</name><label kind="invariant" x="-80" y="184">cost' == 1 &amp;&amp; time &lt;= hatarido_m[id]</label></location><location id="id6" x="-96" y="88"><name x="-160" y="80">Munka</name><label kind="invariant" x="-64" y="80">time &lt;= hatarido_m[id]</label></location><location id="id7" x="-96" y="-152"><name x="-152" y="-160">Start</name><label kind="invariant" x="-72" y="-160">time &lt;= hatarido_m[id] - minTime(id)</label></location><init ref="id7"/><transition><source ref="id3"/><target ref="id6"/><label kind="synchronisation" x="-88" y="32">kezdodik?</label><label kind="assignment" x="-88" y="48">ora=0</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-88" y="224">time == hatarido_m[id]</label><label kind="assignment" x="-88" y="240">todo--</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="guard" x="-88" y="120">ora == munkaido2[id]</label><label kind="synchronisation" x="-88" y="136">elenged!</label></transition><transition><source ref="id7"/><target ref="id3"/><label kind="guard" x="-88" y="-120">munkaido2[id]!=100000</label><label kind="synchronisation" x="-88" y="-96">foglal!</label><label kind="assignment" x="-88" y="-72">aktualis=id
settulvagyunk(id)
REMAINING=remaining()</label></transition></template><system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Gep, Feladatok;</system></nta>