<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.


const int munkaszam = 10;//25;
const int gepszam = 4;
typedef int[0, munkaszam-1] munka_id;
typedef int[0, gepszam-1] gep_id;


const int munkaido2[25][gepszam] = 
{
{1538, 100000, 100000, 1194},
{1500, 100000, 100000, 789},
{1607, 100000, 100000, 818},
{100000, 100000, 1564, 2143},
{100000, 100000, 736, 1017},
{5263, 100000, 100000, 3214},
{4865, 100000, 3025, 3214},
{100000, 100000, 1500, 1440},
{100000, 100000, 1869, 2459},
{100000, 1282, 100000, 100000},
{100000, 3750, 100000, 3000},
{100000, 6796, 7000, 5600},
{11250, 100000, 100000, 6716},
{2632, 100000, 100000, 1527},
{5000, 100000, 100000, 2985},
{1250, 100000, 100000, 783},
{4474, 100000, 100000, 3036},
{100000, 1492, 100000, 100000},
{100000, 3130, 100000, 2687},
{2424, 100000, 1074, 1600},
{7317, 100000, 3614, 100000},
{100000, 100000, 864, 100000},
{100000, 100000, 3624, 100000},
{100000, 100000, 2667, 4000},
{5952, 100000, 3448, 4902}
};

const int atallasi_ido[20][20] = 
{
{0, 300, 800, 1500, 600, 500, 2000, 1100, 0, 0, 500, 1000, 200, 800, 700, 500, 1800, 0, 2500, 300},
{200, 0, 1300, 900, 2500, 200, 800, 2500, 400, 0, 600, 2500, 500, 200, 600, 0, 1100, 0, 800, 2500},
{500, 900, 0, 500, 700, 400, 1500, 400, 900, 0, 200, 1500, 800, 700, 0, 2000, 600, 0, 500, 1300},
{1100, 700, 200, 0, 800, 2000, 900, 0, 1300, 0, 1500, 1000, 1800, 600, 1300, 600, 1500, 0, 1000, 500},
{500, 1000, 0, 1300, 0, 500, 2000, 1300, 900, 0, 400, 300, 2000, 1000, 2000, 700, 200, 0, 300, 900},
{200, 0, 1300, 1000, 1000, 0, 700, 1300, 800, 0, 700, 600, 500, 700, 500, 2000, 900, 0, 1100, 500},
{900, 500, 1100, 0, 1400, 600, 0, 4000, 500, 0, 500, 800, 300, 400, 1100, 500, 1500, 0, 900, 1500},
{1500, 2000, 400, 1300, 500, 900, 700, 0, 900, 0, 400, 1800, 600, 1500, 600, 500, 700, 0, 900, 1100},
{2500, 600, 500, 800, 600, 1800, 600, 200, 0, 0, 2000, 1500, 2000, 0, 600, 900, 1300, 1800, 700, 800},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000, 1300, 0, 0, 0, 0, 0, 0, 800, 0},
{800, 1000, 1300, 800, 1100, 400, 2500, 900, 2000, 0, 0, 800, 1000, 2500, 1500, 600, 800, 2500, 1300, 600},
{200, 700, 600, 300, 900, 300, 500, 200, 400, 400, 200, 0, 2000, 1100, 900, 200, 2000, 0, 600, 500},
{900, 800, 1300, 1100, 1300, 600, 400, 1500, 500, 0, 400, 1800, 0, 0, 1800, 800, 600, 0, 2500, 1000},
{1800, 1500, 2000, 1500, 400, 2500, 500, 500, 1100, 0, 600, 1500, 800, 0, 500, 500, 0, 0, 1100, 1500},
{1500, 900, 1300, 900, 600, 100, 200, 1100, 300, 0, 1300, 500, 400, 600, 0, 1300, 1000, 0, 1300, 1000},
{1300, 2000, 1500, 500, 400, 900, 1800, 600, 700, 0, 1500, 2000, 600, 400, 800, 0, 900, 0, 500, 200},
{700, 700, 900, 800, 1400, 600, 800, 1000, 600, 0, 900, 400, 500, 900, 2000, 1300, 0, 0, 700, 1100},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 1300, 0, 0, 0, 0, 0, 0, 1300, 0},
{600, 500, 1100, 500, 400, 1400, 900, 400, 600, 400, 2500, 0, 700, 700, 500, 1300, 700, 200, 0, 2000},
{700, 500, 2000, 1400, 0, 1100, 500, 600, 1400, 2000, 400, 900, 2000, 800, 700, 300, 500, 0, 800, 0}
};

int minTime(munka_id mid){
  int toReturn=9999;
  for(gid: gep_id) {
    if(munkaido2[mid][gid]&lt;toReturn) toReturn = munkaido2[mid][gid];
  }
return toReturn;
}

int[-1,munkaszam-1] elozo[gepszam]={-1,-1,-1,-1};
int[-1,munkaszam-1] aktualis[gepszam]={-1,-1,-1,-1};

const int hatarido[25] = {15000, 30000, 22000, 25000, 20000, 30000, 21000, 26000, 30000, 29000, 30000, 21000, 30000, 25000, 24000, 30000, 30000, 30000, 13000, 19000, 30000, 20000, 12000, 30000, 17000};

const int beallasido[gepszam] = {180, 175, 0, 237};

chan foglal[gepszam];
chan kezdodik[gepszam];
chan elenged[gepszam];

clock time;

int[0,munkaszam] todo = munkaszam;</declaration><template><name x="5" y="5">Gep</name><parameter>const gep_id id</parameter><declaration>// Place local declarations here.
clock t;</declaration><location id="id0" x="168" y="-176"><label kind="invariant" x="160" y="-208">t&lt;=atallasi_ido[elozo[id]][aktualis[id]]</label></location><location id="id1" x="-40" y="-176"><committed/></location><location id="id2" x="168" y="-64"><name x="184" y="-80">Dolgozik</name><label kind="invariant" x="184" y="-64">t&lt;=munkaido2[aktualis[id]][id]</label></location><location id="id3" x="-128" y="-64"><name x="-208" y="-96">Bekapcsolt</name></location><init ref="id3"/><transition><source ref="id1"/><target ref="id0"/><label kind="guard" x="8" y="-200">elozo[id]!=-1</label></transition><transition><source ref="id1"/><target ref="id2"/><label kind="guard" x="-32" y="-142">elozo[id]==-1</label><label kind="synchronisation" x="-32" y="-120">kezdodik[id]!</label><nail x="-40" y="-64"/></transition><transition><source ref="id0"/><target ref="id2"/><label kind="guard" x="176" y="-152">t==atallasi_ido[elozo[id]][aktualis[id]]</label><label kind="synchronisation" x="176" y="-128">kezdodik[id]!</label><label kind="assignment" x="176" y="-112">t=0</label></transition><transition><source ref="id3"/><target ref="id1"/><label kind="guard" x="-296" y="-128">time &gt;= beallasido[id]</label><label kind="synchronisation" x="-200" y="-168">foglal[id]?</label><label kind="assignment" x="-168" y="-152">t=0</label><nail x="-128" y="-176"/><nail x="-72" y="-176"/><nail x="-56" y="-176"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="synchronisation" x="-72" y="-8">elenged[id]?</label><label kind="assignment" x="-104" y="8">elozo[id]=aktualis[id]</label><nail x="168" y="-8"/><nail x="-128" y="-8"/></transition></template><template><name>Feladatok</name><parameter>const munka_id id</parameter><declaration>gep_id melyik;
clock ora;
</declaration><location id="id4" x="-96" y="-8"><name x="-304" y="-24">Gep_befoglalva_atallasra_var</name><label kind="invariant" x="-64" y="-16">time &lt;= hatarido[id] - minTime(id)</label></location><location id="id5" x="-96" y="280"><name x="-192" y="272">Leszallitva</name></location><location id="id6" x="-96" y="192"><name x="-152" y="184">Kesz</name><label kind="invariant" x="-80" y="184">cost' == 1 &amp;&amp; time &lt;= hatarido[id]</label></location><location id="id7" x="-96" y="88"><name x="-160" y="80">Munka</name><label kind="invariant" x="-64" y="80">time &lt;= hatarido[id]</label></location><location id="id8" x="-96" y="-152"><name x="-152" y="-160">Start</name><label kind="invariant" x="-72" y="-160">time &lt;= hatarido[id] - minTime(id)</label></location><init ref="id8"/><transition><source ref="id4"/><target ref="id7"/><label kind="synchronisation" x="-88" y="32">kezdodik[melyik]?</label><label kind="assignment" x="-88" y="48">ora=0</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="guard" x="-88" y="224">time == hatarido[id]</label><label kind="assignment" x="-88" y="240">todo--</label></transition><transition><source ref="id7"/><target ref="id6"/><label kind="guard" x="-88" y="120">ora &gt;= munkaido2[id][melyik]</label><label kind="synchronisation" x="-88" y="136">elenged[melyik]!</label></transition><transition><source ref="id8"/><target ref="id4"/><label kind="select" x="-88" y="-120">gid: gep_id</label><label kind="synchronisation" x="-88" y="-96">foglal[gid]!</label><label kind="assignment" x="-88" y="-72">melyik=gid, aktualis[melyik]=id</label></transition></template><system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Gep, Feladatok;</system></nta>