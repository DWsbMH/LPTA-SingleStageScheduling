<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.


const int munkaszam = 10;//25;
const int gepszam = 4;
typedef int[0, munkaszam-1] munka_id;
typedef int[0, gepszam-1] gep_id;


const int munkaido2[25][gepszam] = 
{
{1538, -1, -1, 1194},
{1500, -1, -1, 789},
{1607, -1, -1, 818},
{-1, -1, 1564, 2143},
{-1, -1, 736, 1017},
{5263, -1, -1, 3214},
{4865, -1, 3025, 3214},
{-1, -1, 1500, 1440},
{-1, -1, 1869, 2459},
{-1, 1282, -1, -1},
{-1, 3750, -1, 3000},
{-1, 6796, 7000, 5600},
{11250, -1, -1, 6716},
{2632, -1, -1, 1527},
{5000, -1, -1, 2985},
{1250, -1, -1, 783},
{4474, -1, -1, 3036},
{-1, 1492, -1, -1},
{-1, 3130, -1, 2687},
{2424, -1, 1074, 1600},
{7317, -1, 3614, -1},
{-1, -1, 864, -1},
{-1, -1, 3624, -1},
{-1, -1, 2667, 4000},
{5952, -1, 3448, 4902}
};

const int atallasi_ido[20][20] = 
{
{0, 300, 800, 1500, 600, 500, 2000, 1100, 0, 0, 500, 1000, 200, 800, 700, 500, 1800, 0, 2500, 300},
{200, 0, 1300, 900, 2500, 200, 800, 2500, 400, 0, 600, 2500, 500, 200, 600, 0, 1100, 0, 800, 2500},
{500, 900, 0, 500, 700, 400, 1500, 400, 900, 0, 200, 1500, 800, 700, 0, 2000, 600, 0, 500, 1300},
{1100, 700, 200, 0, 800, 2000, 900, 0, 1300, 0, 1500, 1000, 1800, 600, 1300, 600, 1500, 0, 1000, 500},
{500, 1000, 0, 1300, 0, 500, 2000, 1300, 900, 0, 400, 300, 2000, 1000, 2000, 700, 200, 0, 300, 900},
{200, 0, 1300, 1000, 1000, 0, 700, 1300, 800, 0, 700, 600, 500, 700, 500, 2000, 900, 0, 1100, 500},
{900, 500, 1100, 0, 1400, 600, 0, 4000, 500, 0, 500, 800, 300, 400, 1100, 500, 1500, 0, 900, 1500},
{1500, 2000, 400, 1300, 500, 900, 700, 0, 900, 0, 400, 1800, 600, 1500, 600, 500, 700, 0, 900, 1100},
{2500, 600, 500, 800, 600, 1800, 600, 200, 0, 0, 2000, 1500, 2000, 0, 600, 900, 1300, 1800, 700, 800},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000, 1300, 0, 0, 0, 0, 0, 0, 800, 0},
{800, 1000, 1300, 800, 1100, 400, 2500, 900, 2000, 0, 0, 800, 1000, 2500, 1500, 600, 800, 2500, 1300, 600},
{200, 700, 600, 300, 900, 300, 500, 200, 400, 400, 200, 0, 2000, 1100, 900, 200, 2000, 0, 600, 500},
{900, 800, 1300, 1100, 1300, 600, 400, 1500, 500, 0, 400, 1800, 0, 0, 1800, 800, 600, 0, 2500, 1000},
{1800, 1500, 2000, 1500, 400, 2500, 500, 500, 1100, 0, 600, 1500, 800, 0, 500, 500, 0, 0, 1100, 1500},
{1500, 900, 1300, 900, 600, 100, 200, 1100, 300, 0, 1300, 500, 400, 600, 0, 1300, 1000, 0, 1300, 1000},
{1300, 2000, 1500, 500, 400, 900, 1800, 600, 700, 0, 1500, 2000, 600, 400, 800, 0, 900, 0, 500, 200},
{700, 700, 900, 800, 1400, 600, 800, 1000, 600, 0, 900, 400, 500, 900, 2000, 1300, 0, 0, 700, 1100},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 1300, 0, 0, 0, 0, 0, 0, 1300, 0},
{600, 500, 1100, 500, 400, 1400, 900, 400, 600, 400, 2500, 0, 700, 700, 500, 1300, 700, 200, 0, 2000},
{700, 500, 2000, 1400, 0, 1100, 500, 600, 1400, 2000, 400, 900, 2000, 800, 700, 300, 500, 0, 800, 0}
};

int minTime(munka_id mid){
  int toReturn=9999;
  for(gid: gep_id) {
    if(munkaido2[mid][gid] != -1 &amp;&amp; munkaido2[mid][gid]&lt;toReturn) toReturn = munkaido2[mid][gid];
  }
return toReturn;
}

int[-1,munkaszam-1] elozo[gepszam]={-1,-1,-1,-1};
int[-1,munkaszam-1] aktualis[gepszam]={-1,-1,-1,-1};

const int hatarido[25] = {15000, 30000, 22000, 25000, 20000, 30000, 21000, 26000, 30000, 29000, 30000, 21000, 30000, 25000, 24000, 30000, 30000, 30000, 13000, 19000, 30000, 20000, 12000, 30000, 17000};

const int beallasido[gepszam] = {180, 175, 0, 237};

int finishtime[munka_id];
gep_id machine[munka_id];

int getReserveTime(gep_id gid){
  	int toReturn = 0;
 	 if(elozo[gid]!=-1) toReturn += atallasi_ido [elozo[gid]][aktualis[gid]];
  	return toReturn + munkaido2[aktualis[gid]][gid];
}

clock time;

int[0,munkaszam] todo = munkaszam;</declaration><template><name>Feladatok</name><parameter>const munka_id id</parameter><declaration>clock t;
</declaration><location id="id0" x="-96" y="-8"><name x="-192" y="-16">InProgress</name><label kind="invariant" x="-64" y="-16">time &lt;= hatarido[id]</label></location><location id="id1" x="-96" y="184"><name x="-192" y="176">Leszallitva</name></location><location id="id2" x="-96" y="96"><name x="-152" y="88">Kesz</name><label kind="invariant" x="-80" y="88">cost' == 1 &amp;&amp; time &lt;= hatarido[id]</label></location><location id="id3" x="-96" y="-152"><name x="-152" y="-160">Start</name><label kind="invariant" x="-72" y="-160">time &lt;= hatarido[id] - minTime(id)</label></location><init ref="id3"/><transition><source ref="id0"/><target ref="id2"/><label kind="guard" x="-80" y="24">t&gt;=finishtime[id]</label><label kind="assignment" x="-80" y="48">elozo[machine[id]]=id, aktualis[machine[id]]=-1</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="-88" y="128">time == hatarido[id]</label><label kind="assignment" x="-88" y="144">todo--</label></transition><transition><source ref="id3"/><target ref="id0"/><label kind="select" x="-88" y="-120">gid: gep_id</label><label kind="guard" x="-88" y="-96">aktualis[gid] == -1 &amp;&amp; munkaido2[id][gid] != -1 &amp;&amp; time &gt;= beallasido[gid]</label><label kind="assignment" x="-88" y="-72">aktualis[gid]=id, machine[id]=gid,  t=0, finishtime[id]=getReserveTime(gid)</label></transition></template><system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Feladatok;</system></nta>